"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseEnv = exports.inferSchemas = exports.resolveDefaultValueForSpec = void 0;
const z = __importStar(require("zod"));
const preprocessors_1 = require("./preprocessors");
const reporter_1 = require("./reporter");
/**
 * Since there might be a provided default value of `null` or `undefined`, we
 * return a tuple that also indicates whether we found a default.
 */
function resolveDefaultValueForSpec(defaults, nodeEnv) {
    if (defaults) {
        if (nodeEnv != null &&
            Object.prototype.hasOwnProperty.call(defaults, nodeEnv)) {
            return [true, defaults[nodeEnv]];
        }
        if ("_" in defaults)
            return [true, defaults["_"]];
    }
    return [false, undefined];
}
exports.resolveDefaultValueForSpec = resolveDefaultValueForSpec;
/**
 * Mostly an internal convenience function for testing. Returns the input
 * parameter unchanged, but with the same inference used in `parseEnv` applied.
 */
const inferSchemas = (schemas) => schemas;
exports.inferSchemas = inferSchemas;
/**
 * Parses the passed environment object using the provided map of Zod schemas
 * and returns the immutably-typed, parsed environment..
 */
function parseEnv(env, schemas) {
    const parsed = {};
    const errors = [];
    for (const [key, schemaOrSpec] of Object.entries(schemas)) {
        const envValue = env[key];
        let defaultUsed = false;
        let defaultValue;
        try {
            if (schemaOrSpec instanceof z.ZodType) {
                if (envValue == null && schemaOrSpec instanceof z.ZodDefault) {
                    defaultUsed = true;
                    defaultValue = schemaOrSpec._def.defaultValue();
                    // we "unwrap" the default value ourselves and pass it to the schema.
                    // in the very unlikely case that the value isn't stable AND
                    // validation fails, this ensures the default value we report is the
                    // one that was actually used.
                    // (consider `z.number().gte(0.5).default(() => Math.random())` -- if
                    //  we invoked the default getter and got 0.7, and then ran the parser
                    //  against a missing env var and it generated another default of 0.4,
                    //  we'd report a default value that _should_ have passed.)
                    parsed[key] = schemaOrSpec.parse(defaultValue, { errorMap: reporter_1.errorMap });
                }
                else {
                    parsed[key] = (0, preprocessors_1.getSchemaWithPreprocessor)(schemaOrSpec).parse(envValue, { errorMap: reporter_1.errorMap });
                }
            }
            else if (envValue == null) {
                [defaultUsed, defaultValue] = resolveDefaultValueForSpec(schemaOrSpec.defaults, env["NODE_ENV"]);
                if (defaultUsed) {
                    parsed[key] = schemaOrSpec.schema.parse(defaultValue, { errorMap: reporter_1.errorMap });
                }
                else {
                    // if there's no default, pass our envValue through the
                    // schema-with-preprocessor (it's an edge case, but our schema might
                    // accept `null`, and the preprocessor will convert `undefined` to
                    // `null` for us).
                    parsed[key] = (0, preprocessors_1.getSchemaWithPreprocessor)(schemaOrSpec.schema).parse(envValue, { errorMap: reporter_1.errorMap });
                }
            }
            else {
                parsed[key] = (0, preprocessors_1.getSchemaWithPreprocessor)(schemaOrSpec.schema).parse(envValue, { errorMap: reporter_1.errorMap });
            }
        }
        catch (e) {
            errors.push({
                key,
                receivedValue: envValue,
                error: e,
                defaultUsed,
                defaultValue,
            });
        }
    }
    if (errors.length > 0) {
        throw new Error((0, reporter_1.reportErrors)(errors, schemas));
    }
    return parsed;
}
exports.parseEnv = parseEnv;
//# sourceMappingURL=parse-env.js.map